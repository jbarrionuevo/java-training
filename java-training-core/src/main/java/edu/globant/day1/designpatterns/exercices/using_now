Up till now, I have used:
	- The Singleton Pattern, restricting the Inventory instance to be only one.
	- The Factory method Pattern, with a CaseSeller factory which allows to create the different types of sellers, depending on the string parameter
	given.
	- The Observer Pattern; the inventory has a collection of observers (the Providers) and a collection of CaseWrappers (which include a case,
	a minimum stock, and a current stock). Whenever a sale is made, the CaseWrapper of that case is updated, checking if the current stock is
	less than the minimum; if true, the inventory notifies all its observers, so they can refund that case, auto-generating an order to them.
	- The State Pattern; up till now, it may not be necesary, but as I think that in the future, depending on the current state, the sale can
	behave in one way or another, it may be a good idea to implement the state pattern on it.
	- The Strategy Pattern; the CaseSeller class is no longer abstract; instead, now all instances of sellers are going to be CaseSeller instances,
	with a strategy, which will determine how the seller is going to behave (delivery/store/complete seller)