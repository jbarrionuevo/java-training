As I mentioned before, I have worked in the Social Prevision Institute. There, we have an ubiquitous language; for example, we named "Recovery Plan" to a group
of debts joined together, and we named "Recovery Way" to the way these joined debts would be paid/recovered, whereas, in the english language, its usual to 
associate "Recovery Plan" with a number of fees, or the type of payment; in our project, this was associated with "Recovery Way".
We also divided the project structure in different domain classes, such us:
- services (for example, debtService)
- value objects (debtOriginDate, which had day, month, year)
- repositories (debtRepository)
- entities/model objects (such as debt)
Another DDD practice that we developed was the layered architecture, having different layers, such as the presentation layer (where the user could register
a new debt), the application layer (where the new debt was processed), the domain layer (to save/retrieve a debt) and the interface layer.