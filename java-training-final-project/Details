Create a db called ion_solid in MySQL. Then, uncomment the code in Application.java which is specified so
it will create the tables the first time you run the app; for further runnings, comment again that code.

You can enter the app with one of these users:
- user: super pass:super  The super admin. Can check the stock of the products and providers statistics.
- user: store_seller pass:store_seller   A store seller. Can register sales, check their receipts, and refund them. Its id is hardcoded to 1, so it represents 
seller 1 (which is saved in Application.java). Due to the lack of time, I didn't represent the users in the db, only in memory, but this could be a future
work.
- user: logistic pass: logistic   A logistic team member. Can make orders to the providers, and checks the generated alarms due to low stock of products. 
Can set the minimum stock of products, too.
- user: provider pass: provider   A provider. Can check its orders and replace the products he has been ordered. Its id is hardcoded to 1, so it represents 
provider 1 (which is saved in Application.java). Due to the lack of time, I didn't represent the users in the db, only in memory, but this could be a future
work.
//TO DO
- user: delivery_seller pass: delivery_seller Register a bunch of orders and can update them after.

To generate alerts to the logistic team when some case stock is to low, I've implemented the component AlarmThread,
which has a scheduled task called 'checkAlarms', which checks for each casewrapper if its current stock is lower than
its minimum; if true, it generates an alarm containing the product id, and the quantity needed (I've set this quantity 
as the stock needed for recovering the minimum plus 100).
This task is executed once a second, but this delay can be configured as you like.

Required Tasks and their implementations in my development:
1) Keep track of how many cases are in stock for every design and case:
This can be achieved entering the system as super, and clicking in "Check Stock"; there, you will see
each product with its device and design, and its stock.

2) Allow to register an order to the provider when the amount of cases is too low. The amounts can be configured. 
To help the logistic team, there must be alerts that show the cases that need a new order to the provider.
This alarms are automatically generated by the AlarmThread I previously mentioned. Entering the system with logistic,
you can see the alarms that were generated and make the corresponding order, or you can make an order by your own
without needing an alarm. You can also change the products minimum stock if you wish, clicking on "Configure Minimum Stocks"

3) Keep track of how many cases get from each provider, if the delivery was on date or got late, and if late for how much time. In these cases,
the inventory for case must increase.
You can check this entering the system with super, and clicking "Check Providers Statistics". There, you can choose the provider and see its orders
and their delay (I consider that the order must be attended before the lapse of 3 days; if not, its delayed).
On the other hand, entering the system with provider, you can see the orders made to the provider and supply the required cases, which will make
the inventory increase.

4) Allow to register each sale and track its status. There are times when the sale is cancelled due to delivery sellers taking too much time to
get to the customer’s place or the customer in the store realizes that doesn’t have enough money in their card to buy the case. The sale
can have one of these status: draft, paid, cancelled and refund.
  	a) Entering with store_seller: You can register a sale entering the system with seller, and clicking "New Sale"; there, you choose all the cases you want, with a 
  	quantity from 1 to 5, and register the sale entering the customer details before. Then, in "Check Sales", you can check each sale, seeing their status (paid or refund),
  	and other details. You can also change its status from paid to refund. When refunding a paid sale, you can:
  		 	a.1) Just refund it: the case stock is incremented in one, and the sale marked as refund; if the customer want another device, then go back
 			to the main menu and choose new sale.
 			a.2)Chose same model: the date of request its updated to the current date, so a new month of warranty starts
	b) Entering with delivery_seller: You can register a bunch of sales with any of the four status, and then change their status.
	
5) When registering a sell, the amount of physic cases for the design and device sold must be decreased from the inventory.
For this, enter the system as seller, go to "Check Sales", and mark DRAFT sales with "CONFIRM"; if the needed stock is available, the sale will be marked
as PAID, and the corresponding stock will be decreased from the inventory.


//TO DO:
6) In order to save time for the application development, the delivery sellers have to go back to the store to register their sales. 
They have to register all sales, even if they were cancelled.
//IF HAVE TIME: CHOOSE THE CUSTOMER IN THE SALE